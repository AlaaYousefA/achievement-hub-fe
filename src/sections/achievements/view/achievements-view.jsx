import { useState, useEffect } from 'react';
import { useNavigate } from 'react-router-dom';
import {
  Container,
  Stack,
  Button,
  Card,
  CircularProgress,
  Typography,
  TablePagination,
} from '@mui/material';
import { FaPlus, FaFilePdf } from 'react-icons/fa';
import { IconContext } from 'react-icons';
import AchievementsService from '../services/AchievementsService';
import Scrollbar from 'src/components/scrollbar';
import AchievementTable from './AchievementTable';
import AchievementDialog from './AchievementDialog';
import AchievementTableToolbar from '../achievements-table-toolbar';
import jsPDF from 'jspdf';
import html2canvas from 'html2canvas';

import AuthenticationService from 'src/security/AuthenticationService';
import reportHeader from '../../../../public/assets/report-header.png';

export default function AchievementsView() {
  const navigate = useNavigate();

  const [page, setPage] = useState(0);
  const [order, setOrder] = useState('asc');
  const [orderBy, setOrderBy] = useState('name');
  const [rowsPerPage, setRowsPerPage] = useState(5);
  const [achievements, setAchievements] = useState([]);
  const [totalAchievements, setTotalAchievements] = useState(0);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState(null);

  const [filterName, setFilterName] = useState('');
  const [filterCategory, setFilterCategory] = useState([]);
  const [filterStatus, setFilterStatus] = useState([]);
  const [filterTime, setFilterTime] = useState('');
  const [filterUser, setFilterUser] = useState('');
  const [filterTitle, setFilterTitle] = useState('');

  const [openDialog, setOpenDialog] = useState(false);

  useEffect(() => {
    fetchAchievements();
  }, [
    page,
    rowsPerPage,
    order,
    orderBy,
    filterName,
    filterCategory,
    filterStatus,
    filterTime,
    filterUser,
    filterTitle,
  ]);

  const fetchAchievements = async () => {
    setLoading(true);
    setError(null);
    try {
      let filters = {};
      if (filterName) filters = { ...filters, filterName };
      if (filterCategory.length > 0) filters = { ...filters, filterCategory };
      if (filterStatus.length > 0) filters = { ...filters, filterStatus };
      if (filterTime) filters = { ...filters, filterTime };
      if (filterUser) filters = { ...filters, filterUser };
      if (filterTitle) filters = { ...filters, filterTitle };

      const data = await AchievementsService.getAll(page, rowsPerPage, orderBy, order, filters);

      setAchievements(data.content);
      setTotalAchievements(data.totalElements);
    } catch (err) {
      setError('Failed to fetch achievements');
      console.error('Error fetching achievements:', err);
    } finally {
      setLoading(false);
    }
  };

  const handleOpenDialog = () => {
    setOpenDialog(true);
  };

  const handleCloseDialog = () => {
    setOpenDialog(false);
  };

  const handleSort = (event, id) => {
    const isAsc = orderBy === id && order === 'asc';
    if (id !== '') {
      setOrder(isAsc ? 'desc' : 'asc');
      setOrderBy(id);
    }
  };

  const handleChangePage = (event, newPage) => {
    setPage(newPage);
  };

  const handleChangeRowsPerPage = (event) => {
    setPage(0);
    setRowsPerPage(parseInt(event.target.value, 10));
  };

  const handleGenerateReport = async () => {
    const reportTitle = 'KASIT Achievements Report';
    const doc = new jsPDF();

    const authenticatedUser = await AuthenticationService.loadAuthenticatedUser();
    const generatorName = authenticatedUser?.name || 'Unknown User';
    const reportDate = new Date().toLocaleDateString();
    const totalAchievementsCount = totalAchievements;

    doc.addImage(reportHeader, 'PNG', 0, 0, 210, 50);

    doc.addFont('Inter-SemiBold.ttf', 'Inter-SemiBold', 'normal');
    doc.setFont('Inter-SemiBold', 'normal');
    doc.setFontSize(20);
    doc.text(reportTitle, 14, 60);

    doc.addFont('Inter-Regular.ttf', 'Inter-Regular', 'normal');
    doc.setFont('Inter-Regular', 'normal');
    doc.setFontSize(14);
    doc.setTextColor('#4D4C4C');

    doc.text('Generated By :', 14, 75);
    doc.text(generatorName, 70, 75);

    doc.text('Date :', 14, 85);
    doc.text(reportDate, 70, 85);

    doc.text('Total Achievement :', 14, 95);
    doc.text(totalAchievementsCount.toString(), 70, 95);

    html2canvas(document.querySelector('#achievements-table')).then((canvas) => {
      const imgData = canvas.toDataURL('image/png');
      const imgWidth = 190;
      const pageHeight = 295;
      const imgHeight = (canvas.height * imgWidth) / canvas.width;
      let heightLeft = imgHeight;

      let position = 100; // Adjusted to fit below the header and labels

      doc.addImage(imgData, 'PNG', 10, position, imgWidth, imgHeight);
      heightLeft -= pageHeight;

      while (heightLeft >= 0) {
        position = heightLeft - imgHeight;
        doc.addPage();
        doc.addImage(imgData, 'PNG', 10, position, imgWidth, imgHeight);
        heightLeft -= pageHeight;
      }

      doc.save(`${reportTitle}.pdf`);
    });
  };

  return (
    <Container>
      <Stack direction="row" alignItems="center" justifyContent="space-between" mb={5}>
        <Typography variant="h4">Achievements</Typography>
        <Stack direction="row" spacing={2}>
          <Button variant="contained" onClick={handleOpenDialog}>
            <IconContext.Provider value={{ style: { marginRight: '8px' } }}>
              <FaPlus />
            </IconContext.Provider>
            Request New Achievement
          </Button>
          <Button variant="contained" color="primary" onClick={handleGenerateReport}>
            <IconContext.Provider value={{ style: { marginRight: '8px' } }}>
              <FaFilePdf />
            </IconContext.Provider>
            Generate Report
          </Button>
        </Stack>
      </Stack>

      <Card>
        <AchievementTableToolbar
          filterName={filterName}
          filterCategory={filterCategory}
          filterStatus={filterStatus}
          filterTime={filterTime}
          filterUser={filterUser}
          filterTitle={filterTitle}
          onFilterName={setFilterName}
          onFilterCategory={setFilterCategory}
          onFilterStatus={setFilterStatus}
          onFilterTime={setFilterTime}
          onFilterUser={setFilterUser}
          onFilterTitle={setFilterTitle}
        />

        {loading ? (
          <Stack alignItems="center" justifyContent="center" sx={{ py: 5 }}>
            <CircularProgress />
          </Stack>
        ) : error ? (
          <Typography color="error" align="center">
            {error}
          </Typography>
        ) : (
          <Scrollbar>
            <AchievementTable
              achievements={achievements}
              order={order}
              orderBy={orderBy}
              totalAchievements={totalAchievements}
              page={page}
              rowsPerPage={rowsPerPage}
              handleSort={handleSort}
              handleClick={(id) => navigate(`/achievements/${id}`)}
            />
          </Scrollbar>
        )}

        <TablePagination
          page={page}
          component="div"
          count={totalAchievements}
          rowsPerPage={rowsPerPage}
          onPageChange={handleChangePage}
          rowsPerPageOptions={[5, 10, 25]}
          onRowsPerPageChange={handleChangeRowsPerPage}
        />
      </Card>

      <AchievementDialog
        open={openDialog}
        onClose={handleCloseDialog}
        fetchAchievements={fetchAchievements}
      />
    </Container>
  );
}
